#### begin cfg.yaml ####
etmversion: 6.4.12
# The current version of etm and this file. DO NOT EDIT. This is
# automatically updated when a new version of etm is installed.

ampm: true
# true or false. Use AM/PM format for datetimes if true else use 24
# hour format. See also the show_minutes setting.

show_minutes: false
# true or false. If true show ":00" in agenda and forthcoming views
# when displaying times with zero minutes else suppress zero minutes
# from being displayed. E.g., "9:00-10:30" if true else "9-10:30".
# When ampm if false and show_minutes is true, hours will be displayed
# with leading zeros applicable.

dayfirst:  false
yearfirst: true
# each true or false. Whenever an ambiguous date is parsed, dayfirst
# and yearfirst parameters control how the information is processed
# using this precedence:
# yearfirst: true
#   dayfirst: true  => YDM
#   dayfirst: false => YMD
# yearfirst: false
#   dayfirst: true  => DMY
#   dayfirst: false => MDY
# E.g., with both true, 3/4/5 would be interpreted as May 4, 2003.
# When possible, dates will also be displayed respecting these
# settings. I.e., the year will generally be displayed first when
# yearfirst is true and last otherwise. Similarly, the day will
# generally be displayed before the month when dayfirst is true and
# after the month otherwise.

beginbusy: 7
# non-negative integer. The number of hours after midnight to begin
# the busy view display of busy times for each day. The display
# continues for 14 hours after the begin_busy hour. E.g. with
# 'begin_busy: 7' the display would show busy times from 7am (7h)
# until 9pm (21h).

updates_interval: 0
# non-negative integer. If positive,  automatically check for updates
# every 'updates_interval' minutes. If zero, do not automatically
# check for updates. When enabled, a blackboard u symbol, ùï¶, will be
# displayed at the right end of status bar when an update is available
# or a question mark when the check cannot be completed as, for
# example, when there is no internet connection.

update_command: pipx install --force etm-dgraham
# shell command to update etm. The default command is to use pipx 
# if it is installed and was was used before to install etm:
# pipx install --force etm-dgraham
# and, otherwise, to use pip:
# pip install -U etm-dgraham
# Set this option to whatever command you prefer. The default will
# be used if this command is not specified.

locale: en_US
# locale abbreviation. E.g., "en_AU" for English (Australia), "en_US"
# for English (United States), "fr_FR" for French (France) and so
# forth. Google "python locale abbreviatons" for a complete list."

vi_mode: false
# true or false. Use vi keybindings for editing if true else use emacs
# style keybindings.

secret: IkJQB6B5zk
# string to use as the secret_key for @m masked entries. E.g.
# 'X6i2SGWu6m'. In etm versions after 4.0.21, the default string is
# randomly generated when this file is created or when the secret
# value is removed and etm is restarted. WARNING: if this key is
# changed, any @m entries that were made before the change will be
# unreadable after the change.

omit_extent: 
# A list of calendar names. Events with @c entries belonging to this
# list will only have their starting times displayed in agenda view
# and will neither appear nor cause conflicts in busy view.

keep_current: [0, 46]
# A list of two, non-negative integers for "weeks" and "width". If
# weeks is positive, the agenda for that integer number of weeks
# starting with the current week will be written to "current.txt" in
# your etm home directory and updated when necessary. Similarly, 'do
# next' view will be written to "next.txt" and 'goals' view to
# "goals.txt". In all cases, the output will be scaled to fit "width".
# A width of 46, e.g, fits an iPhone display in portrait mode. You
# could, for example, create a link to these files in a pCloud or
# GoogleDrive folder and always have access to your agenda, tasks and
# goals on your mobile device.

archive_after: 0
# non-negative integer. If zero, do not archive items. If positive,
# finished tasks and events with last datetimes falling more than this
# number of years before the current date will automatically be
# archived on a daily basis.  Archived items are moved from the
# "items" table in the database to the "archive" table and will no
# longer appear in normal views. Note that unfinished tasks and
# journal entries are not archived.

num_completed: 0
# non-negative integer. If positive, when saving retain only the most
# recent "num_completed" completions of a goal, otherwise save all
# completions.

num_finished: 0
# non-negative integer. If positive, when saving retain only the most
# recent "num_finished" completions of an infinitely repeating task,
# i.e., repeating without an "&c" count or an "&u" until attribute. If
# zero or not infinitely repeating, save all completions.

num_repetitions: 10
# positive integer. Show at most this number of repetitions when
# showing repetitions with (^r) or when showing completion history
# (^h). In the former case these are instances for the selected item
# (repeating of any item type) starting from date of the selected item
# and in the latter case these are the completion instances (task item
# type). Note that the num_finished setting can affect the number
# available for display for the completion history.

limit_skip_display: true
# true or false. If true, only the first instance of a task with "@o
# s" (overdue skip) will be displayed. For a task with an "@s" entry
# that is a date this will be the first instance that falls on or
# after the current date. Otherwise, when the "@s" entry is a
# datetime, this will be the first instance that falls on or after the
# current time.

connecting_dots: false
# true or false. If true, display dots connecting the item summary and
# the right-hand details columns in tree views.

refresh_interval: 6
# 6, 12, 30 or 60. The event loop responsible for refreshing
# etm caches, updating alerts, timers and so forth, repeats once
# every refresh_interval seconds. This setting determines the maximum
# accuracy for used time recording since, e.g., with a setting of 12
# the clock is only read every 12 seconds so timers can only be accurate
# to the nearest 0.2 minutes.  See also the setting for usedtime_minutes.

usedtime_minutes: 1
# 0, 1, 6, 12, 30 or 60. This setting only affects how used times are
# reported - with 0, no rounding up is done, with 1 times are rounded up
# to the nearest minute, with 6 times are rounded up to the nearest 0.1 of
# an hour, with 12 to the nearest 0.2 of an hour and so forth.  E.g., with
# usedtime_minutes = 12, a used time entry of 15 minutes would be rounded
# up to the nearest multiple of 12 or to 24 minutes = 0.4 hours for
# reporting in the used time views. This setting does not affect how the
# times are recorded but only how they are reported in usedtime views.

usedtime_hours: 6
# 0, 1, 2, ..., 24. The daily goal for used time. This is used in
# effort view to control the display of the daily used time bars. The
# goal is to to maximize the granularity of the bar when displaying
# this number of hours in the space allowed by the terminal width so
# that, e.g., with a goal of 6 the used time bar for the day would
# take all of the available space when the actual used time spent is 6
# or more hours.

journal_name: '#daily'
# Journal items with this index entry and with a summary in 'yyyy-mm-dd'
# format will have the year and month appended to the index. E.g., with
# the setting
#   journal_name: '#daily'
# this journal entry
#   % 2022/10/24 @i #daily
# would be displayed in journal view as if the index entry were
#   @i # daily/2022/10
# thus organizing such entries by the year and month and, within each
# month, by the month day. The '~' places '#daily' near the top in
# journal with daily entries sorted in reverse order so that the
# most recent entries are always at the top.
#
# Pressing 'J' in any view will open a daily journal entry for the
# current date with a summary corresponding to the current date and
# an index entry equal to #daily. This journal entry will be
# created if necessary.

alerts: 
# A dictionary with single-character, "alert" keys and corresponding
# "system command" values. Note that characters "t" (text message) and
# "e" (email) are already used.  The "system command" string should be
# a comand with any applicable arguments that could be run in a
# terminal. Properties of the item triggering the alert can be
# included in the command arguments using the syntax {prop}, e.g.,
# {summary} in the command string would be replaced by the summary
# of the item. Similarly {start} by the starting datetime, {time}
# by the starting time (omits the date for the current date), {when}
# by the time remaining until the starting datetime, {now} by the
# current time, {location} by the @l entry and {description} by
# the @d entry. E.g., If the event "* sales meeting @s 2019-02-12 3p"
# triggered an alert 30 minutes before the starting time the string
# "{summary} {when}" would expand to "sales meeting in 30
# minutes". E.g. on my macbook
#
#    alerts:
#        v:   /usr/bin/say -v "Alex" "{summary}, {when}"
#        ...
#
# would make the alert 'v' use the builtin text to speech sytem
# to speak the item's summary followed by a slight pause
# (the comma) and then the time remaining until the starting
# time, e.g., "sales meeting, in 20 minutes" would be triggered
# by including "@a 20m: v" in the reminder.

expansions: 
# A dictionary with 'expansion name' keys and corresponding
# 'replacement string' values. E.g. with
#
#    expansions:
#        daily: "@s now @i daily"
#        ...
#
# then when "@x d" is entered, popup completions would include
# "@x daily" and, if that is selected and a space entered, completions
# would then offer "@s now @i daily" as a replacement for "@x daily".
# Note that this is a two-stage process.

sms:  
  body: '{location} {when}'
  from: 
  server: 
  pw: 
# Settings to send "t" (sms text message) alerts to the list of phone
# numbers from the item's @n attendee entries using the item's summary
# and the body as specified in the template below as the message.
# E.g., suppose you have a gmail account with email address
# "who457@gmail.com" and want to text alerts to Verizon moble phone
# (123) 456-7890. Then your sms entries should be
#     from:   who457@gmail.com
#     pw:     your gmail password
#     server: smtp.gmail.com:587
# and your item should include the following attendee entry
#     @n 1234567890@vzwpix.com
# In the illustrative phone number, @vzwpix.com is the mms gateway for
# Verizon. Note that the country code is NOT included. Other common
# mms gateways are
#     AT&T:     @mms.att.net
#     Sprint:   @pm.sprint.com
#     T-Mobile: @tmomail.net
# Google "mms gateway listing" for other alternatives.

smtp:  
  body: '{start} {location} ({when}) {description}'
  from: 
  server: 
  id: 
  pw: 
# Settings to send "e" (email message) alerts to the list of email
# addresses from the item's @n attendee entries using the item's
# summary as the subject and body as the message. E.g., if you have a
# gmail account with email address "whatever457@gmail.com", then your
# entries should be
#     from: whatever457@gmail.com
#     id: whatever457
#     pw: your gmail password
#     server: smtp.gmail.com
# For email, the attendee entry, @n, should have comma separated
# entries with the format:
#     [optional name]:<email address>

locations: 
# A dictionary with location group names as keys and corresponding
# lists of locations as values. When given, do next view will group
# items first by the location group name and then by the location
# within that group. Note that locations can appear under more than
# one group name. E.g.,
# locations:
#    home: [home, garage, yard, phone, computer]
#    work: [work, phone, computer, copier, fax]
# Items with a location entry that does not belong to one of these
# location groups will be listed under 'OTHER' and items without a
# location entry under 'OTHER' and then tilde.

queries:  
  lorem: 'any t lorem | remove'
# A dictionary with short query "keys" and corresponding "query"
# values. Each "query" must be one that could be entered as the
# command in query view. Keys can be any short string other than
# 'a', 'u', 'c' or 'l' which are already in use.
# queries:
#    td: m l -q equals itemtype - and ~exists f
#    mi: exists u and ~exists i
#    arch: a exists itemtype
#    lorem: any t lorem | remove
#    daily: in i #daily and in d {}
#    find: in summary d {}
# 'find' would allow you to enter, e.g., `find waldo` and have
# it expand to `includes summary d waldo` and thus locate all
# reminders with `waldo` either in the summary or d (the description).
# 'lorem' would identify every item that has 'lorem' as a tag and
# remove them - thus deleting all the lorem examples. 'daily' would
# allow you to enter, e.g., 'daily whatever' and have it expand to
# `in i #daily and in d whatever` thus identifying every
# daily note that contains 'whatever' in the description.

style: dark
# dark or light. Set the defaults for dark or light terminal
# backgounds. Some output may not be visible unless this is set
# correctly for your display.

type_colors: 
# A dictionary with type keys and corresponding named-color or hex
# values. The default colors are determined by the 'dark' or 'light'
# style setting as follows:
#
#     key           dark default        light default
#  -----------    -----------------   -----------------
#  available       'LightSkyBlue',     'DarkBlue',
#  begin           'Gold',             'DarkViolet',
#  event           'LimeGreen',        'Green',
#  finished        'DarkGrey',         'LightSlateGrey',
#  inbox           'OrangeRed',        'MediumVioletRed',
#  journal         'GoldenRod',        'Brown',
#  goal            'CornflowerBlue',   'CornflowerBlue',
#  pastdue         'LightSalmon',      'Red',
#  plain           'Ivory',            'Black',
#  today           'Ivory bold',       'Black bold',
#  used            'Khaki',            'DodgerBlue',
#  waiting         'SlateGrey',        'DarkSlateBlue',
#  wrap            'ForestGreen',      'LightGrey',
#  inactive        'LightSkyBlue',     'LightSkyBlue',
#  paused          'Gold',             'DarkViolet',
#  running         'LimeGreen',        'YellowGreen',
# Explanations for the key names:
#     available:    available task/job reminders
#     begin:        begin by warnings
#     event:        event reminders
#     finished:     finished task/job reminders
#     inbox:        inbox reminders
#     journal:      journal reminders
#     goal:         goal reminders
#     pastdue:      pasdue task warnings
#     plain:        headings such as outline branches
#     today:        the current and following agenda date headings
#     used:         used time rows in engaged and used time views
#     waiting:      waiting job reminders (jobs with unfinished prereqs)
#     wrap:         before and after rows for events in agenda view with
#                   @w entries
#     running:      status bar color for 'r', running timer
#     paused:       status bar color for 'p', paused timer
#     inactive:     status bar color for 'i', inactive timer
#
# E.g., with style 'dark', the default color for 'available' is
# 'LightSkyBlue'. This entry
#   colors:
#       available: CornFlowerBlue
# would change the 'available' color to 'CornflowerBlue' while leaving
# the other 'dark' colors unchanged.
#
# To preview the namedcolors, download "namedcolors.py" from
#    "https://github.com/dagraham/etm-dgraham",
# open a terminal with your chosen background color and run
#    python3 <path to namedcolors.py>
# at the command prompt.

window_colors: 
# A dictionary with style component keys and corresponding lists of
#    [background, foreground, attribute]
# components. background and foreground can either be named colors,
# hex colors, or ''. Attribute is an optional font attribute such
# as 'bold' which must, of course, be supported by the font used in
# your terminal. The default settings are determined by the 'dark'
# or 'light' style setting as follows:
#
#    key                       dark default                  light default
# -------------------    -----------------------------  -----------------------------
# ask:                    [grey2, Lime, bold]           [Cornsilk, Lime, bold]
# button.focused:         [DarkGreen, White]            [DarkGreen, White]
# details:                [, Ivory]                     [, Black]
# dialog shadow:          [#444444, ]                   [#444444, ]
# dialog:                 [DarkSlateGrey, White]        [DimGrey, White]
# dialog-entry:           [White, Black]                [White, Black]
# dialog-output:          [DarkSlateGrey, Lime]         [DimGrey, Lime]
# dialog.body label:      [, White]                     [, White]
# dialog.body:            [DarkSlateGrey, White]        [DimGrey, White]
# entry:                  [grey2, LightGoldenRodYellow] [Cornsilk, LightGoldenRodYellow]
# edit:                   [grey2, LightGoldenRodYellow] [Cornsilk, LightGoldenRodYellow]
# frame.label:            [DarkSlateGrey, White]        [DimGrey, White]
# menu:                   [DarkSlateGrey, White]        [DimGrey, White]
# menu-bar:               [grey1, White]                [grey1, White]
# menu-bar.selected-item: [#ffffff, #000000]            [#ffffff, #000000]
# menu.border:            [, #aaaaaa]                   [, #aaaaaa]
# not-searching:          [, #222222]                   [, #777777]
# query:                  [, Ivory]                     [, Black]
# reply:                  [grey2, DeepSkyBlue]          [Cornsilk, DeepSkyBlue]
# shadow:                 [#222222, ]                   [#222222, ]
# status:                 [grey1, White]                [grey1, White]
# status.key:             [, #ffaa00]                   [, #ffaa00]
# status.position:        [, #aaaa00]                   [, #aaaa00]
# text-area:              [grey2, Ivory]                [Cornsilk, Black]
# window.border shadow:   [, #444444]                   [, #444444]
# window.border:          [, #888888]                   [, #888888]
#
# Note that 'grey1' (#396060) and 'grey2' (#1d3030) are colors named
# within etm itself. They are, respectively, one shade lighter and two
# shades darker than DarkSlateGrey.
#
# Any of the style attributes above can be modified. E.g., with style
# 'dark', the default for 'text-area' is [grey2, Ivory]. This entry
#   window_colors:
#       text-area: [Black, White]
# would change the 'text-area' setting to 'Black' as the background color
# and 'White' as the foreground color while leaving the other style settings
# unchanged.
#### end cfg.yaml ####